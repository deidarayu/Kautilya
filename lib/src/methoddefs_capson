int ledkeys(void) {return int(keyboard_leds);}
bool is_caps_on(void) {return ((ledkeys() & 2) == 2) ? true : false;}

void wait_for_drivers(int sleep){
  bool CapsLockTrap = is_caps_on();
  while(CapsLockTrap == is_caps_on()){
    Keyboard.set_key1(KEY_CAPS_LOCK);
    Keyboard.send_now();
    unpresskey();
    delay(sleep);
  }
}

bool cmd_admin(int reps, int millisecs){
  make_sure_capslock_is_on();
  unsigned int i = 0;
  do{
    Keyboard.set_modifier(MODIFIERKEY_RIGHT_GUI);
    Keyboard.send_now();
    unpresskey();
    delay(400 + i * millisecs);
    Keyboard.print("cmd /T:01 /K \"@echo off && mode con:COLS=15 LINES=1 && title Installing Drivers\"");
    delay(800 + i * millisecs);
    Keyboard.set_modifier(MODIFIERKEY_CTRL);
    Keyboard.send_now();
    Keyboard.set_modifier(MODIFIERKEY_CTRL | MODIFIERKEY_SHIFT);
    Keyboard.send_now();
    Keyboard.set_key1(KEY_ENTER);
    Keyboard.send_now();
    unpresskey();
    delay(1000 + i * millisecs);
    send_left_enter();
    delay(800 + i * millisecs);
    create_click_capslock_win();
    if (check_for_capslock_success_teensy(i+3,millisecs)){ return true;}
	i++;
  }
  while (i<reps);
  return false;
}

bool cmd(int reps, int millisecs, char *SomeCommand){
  make_sure_capslock_is_on();
  unsigned int i = 0;
  do{
    Keyboard.set_modifier(MODIFIERKEY_RIGHT_GUI);
    Keyboard.set_key1(KEY_R);
    Keyboard.send_now();
    unpresskey();
    delay(500 + i * millisecs);
    Keyboard.print(SomeCommand);
    Keyboard.set_key1(KEY_ENTER);
    Keyboard.send_now();
    unpresskey();
    delay(1000 + i * millisecs);
    create_click_capslock_win();
    if (check_for_capslock_success_teensy(i+2,millisecs)){ return true;}
	i++;
  }
  while (i<reps);
  return false;
}

void make_sure_capslock_is_on(void){
    if (!is_caps_on()){
        Keyboard.set_key1(KEY_CAPS_LOCK);
        Keyboard.send_now();
        unpresskey();
        delay(200);
    }
}

void make_sure_capslock_is_off(void){
    if (is_caps_on()){
        Keyboard.set_key1(KEY_CAPS_LOCK);
        Keyboard.send_now();
        unpresskey();
        delay(200);
    }
}

void create_click_capslock_win(){
  make_sure_capslock_is_on();
  Keyboard.println("echo Set WshShell = WScript.CreateObject(\"WScript.Shell\"): WshShell.SendKeys \"{CAPSLOCK}\" > %temp%\\\\capslock.vbs");
  delay(80);
  Keyboard.println("wscript %temp%\\\\capslock.vbs");
  delay(100);
}

bool check_for_capslock_success_teensy(int reps, int millisecs){
  unsigned int i = 0;
  do{
    delay(millisecs);
    if (!is_caps_on()){
      make_sure_capslock_is_on();
      return true;
    }
    i++;
  }
  while (is_caps_on() && (i<reps));
  return false;
}

void minimise_windows(void){
  Keyboard.set_modifier(MODIFIERKEY_RIGHT_GUI);
  Keyboard.set_key1(KEY_M);
  Keyboard.send_now();
  unpresskey();
  delay(300);
}

void reset_windows_desktop(int sleep){
  minimise_windows();
  delay(sleep);
  minimise_windows();
  delay(sleep);
  minimise_windows();
  delay(sleep);
}

void send_left_enter(){
  delay(500);
  Keyboard.set_key1(KEY_LEFT);
  Keyboard.send_now();
  Keyboard.set_key1(0);
  Keyboard.send_now();
  delay(200);
  Keyboard.set_key1(KEY_ENTER);
  Keyboard.send_now();
  Keyboard.set_key1(0);
  Keyboard.send_now();
  delay(800);
}

void unpresskey(){
  delay(50);
  Keyboard.set_modifier(0);
  Keyboard.set_key1(0);
  Keyboard.send_now(); 
}